<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".cs" #>
using System;
using System.Linq;
using System.Net.Http;
using Microsoft.Extensions.DependencyInjection;
using Polly;
using Polly.Contrib.WaitAndRetry;
using Polly.Extensions.Http;
using Serilog;

<# 
var nameSpace = "Trakx.CoinGecko.ApiClient";
#>
namespace <#= nameSpace #>
{
    public static partial class AddCoinGeckoClientExtension
    {
        private static void AddClients(this IServiceCollection services, CoinGeckoApiConfiguration configuration)
        {
            var configurator = new ClientConfigurator(configuration);
            var maxRetryCount = configuration.MaxRetryCount ?? 10;
            var delays = Backoff.DecorrelatedJitterBackoffV2(
                medianFirstRetryDelay: TimeSpan.FromMilliseconds(configuration.InitialRetryDelayInMilliseconds ?? 100), 
                retryCount: maxRetryCount, fastFirst: false).ToList();

            <# 
            var clientNames = new [] { "PingClient", "SimpleClient", "CoinsClient", "ContractClient", 
                                       "ExchangesClient", "FinanceClient", "IndexesClient", "DerivativesClient", 
                                       "Status_updatesClient", "EventsClient", "Exchange_ratesClient", "TrendingClient", 
                                       "GlobalClient" };

            foreach(var name in clientNames)
            {
            #>
                        
            services.AddHttpClient<I<#= name #>, <#= name #>>("<#= nameSpace #>.<#= name #>", x => configurator.AddHeaders(x))
                .AddPolicyHandler((s, request) => 
                    Policy<HttpResponseMessage>
                    .Handle<ApiException>()
                    .OrTransientHttpStatusCode()
                    .WaitAndRetryAsync(
		                retryCount: maxRetryCount,
		                sleepDurationProvider: (retryCount, response, context) => 
			                GetServerWaitDuration(response, delays[retryCount - 1]),
		                onRetryAsync: (result, timeSpan, retryCount, context) =>
							LogFailure(Log.Logger.ForContext<<#= name #>>(), result, timeSpan, retryCount, context))
                    .WithPolicyKey("<#= nameSpace #>.<#= name #>"))
                    
                .AddHttpMessageHandler<CachedHttpClientHandler>();

            <#
            }
            #>
}
    }
}
